#!/usr/bin/env lua

--------------------------------------------------------------------------------
--LuaZDF-begin --with argsfileinargs argsfilesindir insertall readargsfile shelljoin
--------------------------------------------------------------------------------
local lfs = require( "lfs" ) --ZREQ-lfs
--ZFUNC-argsfileinargs-v1
local function argsfileinargs( args ) --> filepath, idx, rest
   local idx = nil
   for k, v in pairs( args ) do
      if v == "--args" then
         idx = k
      end
   end
   if not idx then return nil, idx, args end
   -- we have a args parameter that should be used
   local filepath = nil
   local rest = {}
   for i = 1, #args do
      if i == idx then
         -- nothing happens --args
      elseif i == idx+1 then
         filepath = args[ i ]
      else
         table.insert( rest, args[ i ] )
      end
   end
   return filepath, idx, rest
end
--ZFUNC-argsfilesindir-v1
local function argsfilesindir( appname, dir ) --> defargs, filepaths
   --ZFUNC-dirfiles-v1
   local function dirfiles( path ) --> iter
      local function yielddir( path )
         for entry in lfs.dir( path ) do
            local entrypath = path.."/"..entry
            local mode = lfs.attributes( entrypath, "mode" )
            if mode == "file" then
               coroutine.yield( entry )
            end
         end
      end
      return coroutine.wrap( function() yielddir( path ) end )
   end
   --ZFUNC-endswith-v1
   local function endswith( str, suffix ) --> res
      return string.sub( str, -string.len( suffix ) ) == suffix
   end
   --ZFUNC-startswith-v1
   local function startswith( str, prefix ) --> res
      return string.sub( str, 1, string.len( prefix ) ) == prefix
   end
   dir = dir or "."
   local defargs = nil
   local filepaths = {}
   -- check for .args files in the working directory
   for filename in dirfiles( dir ) do
      if filename == appname..".auto.args" then
         defargs = filename
      elseif startswith( filename, appname ) and
         endswith( filename, ".args" ) then
         table.insert( filepaths, filename )
      end
   end
   if #filepaths > 0 then
      return defargs, filepaths
   end
   
   return defargs, nil
end
--ZFUNC-insertall-v1
local function insertall( arr, pos, oth ) --> arr
   if not oth then
      oth = pos
      pos = #oth + 1
   end
   for _, v in ipairs( oth ) do
      table.insert( arr, pos, v )
      pos = pos + 1
   end
   return arr
end
--ZFUNC-readargsfile-v1
local function readargsfile( filepath ) --> args, err
   --ZFUNC-appendall-v1
   local function appendall( arr, oth ) --> arr
      for _, v in ipairs( oth ) do
         table.insert( arr, v )
      end
      return arr
   end
   --ZFUNC-readlines-v1
   local function readlines( filepath )
      local f, err = io.open( filepath, "r" )
      if err then return nil, err end
      local strlst = {}
      for line in f:lines() do
         table.insert( strlst, line )
      end
      local res, err = f:close()
      if err then return nil, err end
      return strlst
   end
   --ZFUNC-rmprefix-v1
   local function rmprefix( str, prefix )
      local prefixlen = string.len( prefix )
      local startsub = string.sub( str, 1, prefixlen )
      if startsub == prefix then
         return string.sub( str, prefixlen + 1 )
      else
         return str
      end
   end
   --ZFUNC-shellsplit-v1
   local function shellsplit( line ) --> args
      --ZFUNC-trim-v1
      local function trim( str )
         local n = str:find( "%S" )
         return n and str:match( ".*%S" ) or ""
      end
      --ZFUNC-utf8codes-v1
      local function utf8codes( str )
         return str:gmatch( "[%z\1-\127\194-\244][\128-\191]*" )
      end
      local function isspace( str )
         return str == " " or str == "\t" or str == "\r" or str == "\n"
      end
      line = trim( line )
      local args = {}
      local buff = {}
      local escaped, doubleQ, singleQ, backQ = false, false, false, false
      for r in utf8codes( line ) do
         if escaped then-----------------------------------------------------------
            table.insert( buff, r )
            escaped = false
         elseif r == '\\' then-----------------------------------------------------
            if singleQ then
               table.insert( buff, r )
            else
               escaped = true
            end
         elseif isspace( r ) then--------------------------------------------------
            if singleQ or doubleQ or backQ then
               table.insert( buff, r )
            else
               table.insert( args, table.concat( buff ) )
               buff = {}
            end
         elseif r == "`" then------------------------------------------------------
            if singleQ or doubleQ then
               table.insert( buff, r )
            else
               backQ = not backQ
            end
         elseif r == '"' then------------------------------------------------------
            if singleQ or backQ then
               table.insert( buff, r )
            else
               doubleQ = not doubleQ
            end
         elseif r == "'" then------------------------------------------------------
            if doubleQ or backQ then
               table.insert( buff, r )
            else
               singleQ = not singleQ
            end
         else----------------------------------------------------------------------
            table.insert( buff, r )
         end
      end
      if #buff > 0 then table.insert( args, table.concat( buff ) ) end
      return args
   end
   local function appendtolast( tab, i, j )
      local val = tab[ #tab ] or ""
      val = val..i..j
      tab[ #tab ] = val
      return tab
   end
   local lines, err = readlines( filepath )
   if err then return nil, err end
   local args = {}
   for i, line in ipairs( lines ) do
      if #line == 0 then
         --we ignore empty lines
      elseif line:match( "^#" ) then
         --we ignore comments
      elseif line:match( "^$ " ) then
         appendall( args, shellsplit( rmprefix( line, "$ " ) ) )
      elseif line:match( "^| " ) then
         appendtolast( args, "", rmprefix( line, "| " ) )
      elseif line:match( "^|= " ) then
         appendtolast( args, "=", rmprefix( line, "|= " ) )
      elseif line:match( "^|s " ) then
         appendtolast( args, " ", rmprefix( line, "|s " ) )
      elseif line:match( "^|t " ) then
         appendtolast( args, "\t", rmprefix( line, "|t " ) )
      elseif line:match( "^|n " ) then
         appendtolast( args, "\n", rmprefix( line, "|n " ) )
      else
         table.insert( args, line )
      end
   end
   return args
end
--ZFUNC-shelljoin-v1
local function shelljoin( args ) --> line
   --ZFUNC-escapeshellarg-v1
   local function escapeshellarg( str )
      return '"'..str:gsub( '"', '\\"' )..'"'
   end
   --ZFUNC-isoneshellarg-v1
   local function isoneshellarg( str )
      --ZFUNC-utf8codes-v1
      local function utf8codes( str )
         return str:gmatch( "[%z\1-\127\194-\244][\128-\191]*" )
      end
      local function isspace( str )
         return str == " " or str == "\t" or str == "\r" or str == "\n"
      end
      local inbuff = false
      local escaped, doubleQ, singleQ, backQ = false, false, false, false
      for r in utf8codes( str ) do
         if escaped then--------------------------------------------------------
            inbuff = true
            escaped = false
         elseif r == '\\' then--------------------------------------------------
            if singleQ then inbuff = true
            else escaped = true
            end
         elseif isspace( r ) then-----------------------------------------------
            if singleQ or doubleQ or backQ then inbuff = true
            else return false
            end
         elseif r == "`" then---------------------------------------------------
            if singleQ or doubleQ then inbuff = true
            else backQ = not backQ
            end
         elseif r == '"' then---------------------------------------------------
            if singleQ or backQ then inbuff = true
            else doubleQ = not doubleQ
            end
         elseif r == "'" then---------------------------------------------------
            if doubleQ or backQ then inbuff = true
            else singleQ = not singleQ
            end
         else-------------------------------------------------------------------
            inbuff = true
         end
      end
      if escaped or doubleQ or singleQ or backQ then return false end
      if inbuff then return true end
      return false --no argument
   end
   local tmp = {}
   for _, a in ipairs( args ) do
      if not isoneshellarg( a ) then
         a = escapeshellarg( a )
      end
      table.insert( tmp, a )
   end
   return table.concat( tmp, " " )
end
--------------------------------------------------------------------------------
--LuaZDF-end
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Output Util Functions
--------------------------------------------------------------------------------

local debug = false
local normalOutput = true

local function errexit()
   os.exit( 1 )
end

local function println( ... )
   if normalOutput then
      print( ... )
   end
end

local function printfln( str, ... )
   if normalOutput then
      return io.stdout:write( str:format( ... ), "\n" ) 
   end
end

local function errfln( str, ... )
   return io.stderr:write( "Error: ", str:format( ... ), "\n" )
end

--------------------------------------------------------------------------------

local function usage()
   return "injarg <app> [ ... --args <file> ... ]"
end

local function handleargsfile( filepath )
   local args, err = readargsfile( filepath )
   if err then
      errfln( "Not able to open args-file %q", filepath )
      errfln( err )
      errexit()
   end

   return args
end

--------------------------------------------------------------------------------
--
--------------------------------------------------------------------------------
if #arg < 1 then
   errfln( "Need at least the app name." )
   printfln( usage() )
   errexit()
end

local appname = table.remove( arg, 1 )

local defargs, filepaths = argsfilesindir( appname )

----------------------------------------------------------------------- app mode
if #arg == 0 then
   if not defargs and not filepaths then
      errfln( "No default args file detected for %q", appname )
      errexit()
   end

   if not filepaths then filepaths = {} else table.sort( filepaths ) end
   if defargs then table.insert( filepaths, 1, defargs ) end

   if #filepaths > 1 then
      errfln( "Please select one of this args files:" )
      for _, path in pairs( filepaths ) do
         println( path )
      end
      errexit()
   end

   local args = handleargsfile( filepaths[ 1 ] )
   table.insert( args, 1, appname )
   println( shelljoin( args ) )
   
---------------------------------------------------------------------- args mode
else
   local filepath, idx, rest = argsfileinargs( arg )
   if not filepath then
      errfln( "no --args parameter detected in: %s", table.concat( arg, " " ) )
      errexit()
   end

   local args, err = handleargsfile( filepath )
   insertall( rest, idx, args )
   table.insert( rest, 1, appname )
   println( shelljoin( rest ) )

end
